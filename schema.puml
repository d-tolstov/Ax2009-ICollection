@startuml "ICollection"

interface Enumerable{
    GetEnumerator() : Enumerator
}

interface ICollection{
    Add(anytype item) : ICollection
    Count() : int
    Contains(anytype item) : boolean
    Except(ICollection collection) : ICollection
}
Enumerable <|-- ICollection

class SysSet{
    GetEnumerator() : SetEnumerator
    Add(anytype item) : SysSet
    Except(SysSet collection) : SysSet
}
ICollection <|.. SysSet

class Set{
}
SysSet o-- Set

class SetEnumerator{
}
SysSet o-- SetEnumerator

class SysList{
    GetEnumerator() : ListEnumerator
    Add(anytype item) : SysList
    Except(SysList collection) : SysList
}
ICollection <|.. SysList

class ListEnumerator{
}
SysList o-- ListEnumerator

class List{
}
SysList o-- List

interface Enumerator{
}
SetEnumerator ..|> Enumerator
ListEnumerator ..|> Enumerator

class SysICollectionCLR{
    GetEnumerator() : SysEnumerator_SystemCollection
    Add(anytype item) : SysICollectionCLR
    Except(SysICollectionCLR collection) : SysICollectionCLR
}
ICollection <|.. SysICollectionCLR

class SysListCLR{
}
SysICollectionCLR <|-- SysListCLR

class SysSetCLR{
}
SysICollectionCLR <|-- SysSetCLR

class SysEnumerator_SystemCollection{
}
SysICollectionCLR o-- SysEnumerator_SystemCollection

interface ISysEnumerator{
}
SysEnumerator_SystemCollection ..|> ISysEnumerator
ISysEnumerator --|> Enumerator

package System.Collections.Generic{
    interface ICollection(T){
    }
    SysICollectionCLR o-- "ICollection(T)"
    SysListCLR o-- "List(T)"
    "List(T)" ..|> "ICollection(T)"
    SysSetCLR o-- "SortedSet(T)"
    "SortedSet(T)" ..|> "ICollection(T)"
}

@enduml