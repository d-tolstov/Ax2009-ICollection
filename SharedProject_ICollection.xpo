Exportfile for AOT version 1.0 or later
Formatversion: 1

***Element: CLS

; Microsoft Dynamics AX Class: ICollection выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  INTERFACE #ICollection
    PROPERTIES
      Name                #ICollection
      Extends             #Enumerable
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #Add
        #/// <summary>
        #/// Добавить указанный элемент в список
        #/// </summary>
        #/// <param name="item">
        #///
        #/// </param>
        #/// <returns>
        #///
        #/// </returns>
        #/// <remarks>
        #///
        #/// </remarks>
        #ICollection Add( anytype item)
        #{
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #/// <summary>
        #/// Аналог интерфейса ICollection<T>
        #/// https://docs.microsoft.com/ru-ru/dotnet/api/system.collections.generic.icollection-1?view=netframework-4.8
        #/// </summary>
        #/// <remarks>
        #///
        #/// </remarks>
        #interface ICollection extends Enumerable
        #{
        #}
      ENDSOURCE
      SOURCE #Concat
        #/// <summary>
        #/// Создание нового списка путём объединения значений текущего и указанного списка
        #/// </summary>
        #/// <param name="_collection">
        #///
        #/// </param>
        #/// <returns>
        #///
        #/// </returns>
        #/// <remarks>
        #///
        #/// </remarks>
        #ICollection Concat(ICollection _collection)
        #{
        #}
      ENDSOURCE
      SOURCE #Contains
        #/// <summary>
        #/// Содержит ли список указанный элемент
        #/// </summary>
        #/// <param name="item">
        #///
        #/// </param>
        #/// <returns>
        #///
        #/// </returns>
        #/// <remarks>
        #///
        #/// </remarks>
        #boolean Contains( anytype item)
        #{
        #}
      ENDSOURCE
      SOURCE #Count
        #/// <summary>
        #/// Количество элементов
        #/// </summary>
        #/// <returns>
        #///
        #/// </returns>
        #/// <remarks>
        #///
        #/// </remarks>
        #int Count()
        #{
        #}
      ENDSOURCE
      SOURCE #Except
        #/// <summary>
        #/// Создание нового списка уникальных значений на основе текущего, за исключением значений из указанного списка
        #/// </summary>
        #/// <param name="_collection">
        #///
        #/// </param>
        #/// <returns>
        #///
        #/// </returns>
        #/// <remarks>
        #///
        #/// </remarks>
        #ICollection Except(ICollection _collection)
        #{
        #}
      ENDSOURCE
      SOURCE #MaxValue
        #/// <summary>
        #/// Максимальное значение в коллекции
        #/// </summary>
        #/// <returns>
        #///
        #/// </returns>
        #/// <remarks>
        #///
        #/// </remarks>
        #anytype MaxValue()
        #{
        #}
      ENDSOURCE
      SOURCE #MinValue
        #/// <summary>
        #/// Минимальное значение в коллекции
        #/// </summary>
        #/// <returns>
        #///
        #/// </returns>
        #/// <remarks>
        #///
        #/// </remarks>
        #anytype MinValue()
        #{
        #}
      ENDSOURCE
      SOURCE #Remove
        #/// <summary>
        #/// Удаление одного указанного значения из списка
        #/// </summary>
        #/// <param name="item">
        #///
        #/// </param>
        #/// <returns>
        #///
        #/// </returns>
        #/// <remarks>
        #///
        #/// </remarks>
        #ICollection Remove( anytype item)
        #{
        #}
      ENDSOURCE
      SOURCE #Sum
        #/// <summary>
        #/// Сумма значений числовой коллекции
        #/// </summary>
        #/// <returns>
        #///
        #/// </returns>
        #/// <remarks>
        #///
        #/// </remarks>
        #real Sum()
        #{
        #}
      ENDSOURCE
      SOURCE #Union
        #/// <summary>
        #/// Создание нового списка путём объединения уникальных значений текущего и указанного списка
        #/// </summary>
        #/// <param name="_collection">
        #///
        #/// </param>
        #/// <returns>
        #///
        #/// </returns>
        #/// <remarks>
        #///
        #/// </remarks>
        #ICollection Union(ICollection _collection)
        #{
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: ICollectionStatic выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #ICollectionStatic
    PROPERTIES
      Name                #ICollectionStatic
      Extends             #
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #/// <summary>
        #/// Класс для хранения статических функций, общих для семейства ICollection
        #/// </summary>
        #/// <remarks>
        #///
        #/// </remarks>
        #class ICollectionStatic
        #{
        #}
      ENDSOURCE
      SOURCE #construct
        #static ICollection construct( anytype source)
        #{
        #    Types           sourceType = typeof(source);
        #    ClassId         sourceClassId;
        #    SysDictClass    dc;
        #    ICollection     ret;
        #;
        #    switch (sourceType)
        #    {
        #        case Types::Class:
        #            sourceClassId   = classidget(source);
        #            dc              = new SysDictClass(sourceClassId);
        #            if ( dc.isImplementing(classnum(ICollection)))
        #            {
        #                ret = source;
        #            }
        #            else
        #            switch (sourceClassId)
        #            {
        #                case classnum(Set):
        #                    ret = SysSet::constructSet(source);
        #                    break;
        #                case classnum(List):
        #                    ret = SysList::constructList(source);
        #                    break;
        #                default:
        #                    throw Error(strfmt("Класс \"%1\" не поддерживается в функции %2", ClassId2Name(sourceClassId), funcname()));
        #            }
        #            break;
        #        default:
        #            throw Error(Error::unsupportedEnumValue(funcname(), sourceType));
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysSet выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysSet
    PROPERTIES
      Name                #SysSet
      Extends             #
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #Add
        #SysSet Add(anytype item)
        #{
        #;
        #    set.add( item);
        #    return this;
        #}
      ENDSOURCE
      SOURCE #assertCollectionIsNumber
        #protected void assertCollectionIsNumber(
        #    str     _funcname
        #)
        #{
        #;
        #    switch (this.set().typeId())
        #    {
        #        case Types::Int64:
        #        case Types::Integer:
        #        case Types::Real:
        #            return;
        #    }
        #
        #    throw Error(
        #        strfmt( "Функцию %1 можно вызывать только для числовых коллекций! Обратитесь к разработчикам."
        #              , _funcname
        #              )
        #    );
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #/// <summary>
        #/// Обертка для класса Set , реализующая интерфейс ICollection
        #///
        #/// Варианты инициализации :
        #///    - на основе ранее созданного Set
        #///         SysSet::constructSet( set)
        #///    - новый Set с указанием типа
        #///         SysSet::constructType( Types::Integer)
        #///
        #/// </summary>
        #/// <remarks>
        #///
        #/// </remarks>
        #class SysSet implements ICollection
        #{
        #    Set     set;
        #}
      ENDSOURCE
      SOURCE #Concat
        #SysSet Concat(SysSet _collection)
        #{
        #;
        #    return this.Union( _collection);
        #}
      ENDSOURCE
      SOURCE #Contains
        #boolean Contains(anytype item)
        #{
        #    return set.in(item);
        #}
      ENDSOURCE
      SOURCE #Count
        #int Count()
        #{
        #    return set.elements();
        #}
      ENDSOURCE
      SOURCE #Except
        #SysSet Except(SysSet _collection)
        #{
        #;
        #    return SysSet::constructSet( Set::difference( this.set(), _collection.set()));
        #}
      ENDSOURCE
      SOURCE #GetEnumerator
        #SetEnumerator GetEnumerator()
        #{
        #    return set.getEnumerator();
        #}
      ENDSOURCE
      SOURCE #json
        #str json()
        #{
        #    return SysJSONConvert::construct().SerializeObject( this.set());
        #}
      ENDSOURCE
      SOURCE #MaxValue
        #anytype MaxValue()
        #{
        #    anytype     ret;
        #    Enumerator  enumerator;
        #;
        #    if ( !this.set().elements())
        #        throw Error("Коллекция не содержит элементов!");
        #
        #    enumerator  = this.GetEnumerator();
        #    while ( enumerator.moveNext())
        #    {
        #        ret = enumerator.current();
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #MinValue
        #anytype MinValue()
        #{
        #    anytype     ret;
        #    Enumerator  enumerator;
        #;
        #    if ( !this.set().elements())
        #        throw Error("Коллекция не содержит элементов!");
        #
        #    enumerator  = this.GetEnumerator();
        #    if ( enumerator.moveNext())
        #        ret = enumerator.current();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #new
        #void new( Set _set)
        #{
        #;
        #    if ( !_set)
        #        throw Error(strfmt("В функцию %1 не передан параметр _set!", funcname()));
        #
        #    set = _set;
        #}
      ENDSOURCE
      SOURCE #Remove
        #SysSet Remove( anytype item)
        #{
        #;
        #    this.set().remove(item);
        #
        #    return this;
        #}
      ENDSOURCE
      SOURCE #set
        #Set set()
        #{
        #    return set;
        #}
      ENDSOURCE
      SOURCE #Sum
        #real Sum()
        #{
        #    real        ret;
        #    Enumerator  enumerator;
        #;
        #    this.assertCollectionIsNumber(funcname());
        #
        #    enumerator  = this.GetEnumerator();
        #    while (enumerator.moveNext())
        #    {
        #        ret += enumerator.current();
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #Union
        #SysSet Union(SysSet _collection)
        #{
        #;
        #    return SysSet::constructSet( Set::union( this.set(), _collection.set()));
        #}
      ENDSOURCE
      SOURCE #constructSet
        #static SysSet constructSet(Set _set)
        #{
        #    return new SysSet(_set);
        #}
      ENDSOURCE
      SOURCE #constructType
        #static SysSet constructType(Types _type)
        #{
        #    return SysSet::constructSet( new Set(_type));
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysList выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysList
    PROPERTIES
      Name                #SysList
      Extends             #
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #Add
        #SysList Add(anytype item)
        #{
        #;
        #    list.addEnd( item);
        #
        #    return this;
        #}
      ENDSOURCE
      SOURCE #assertCollectionIsNumber
        #protected void assertCollectionIsNumber(
        #    str     _funcname
        #)
        #{
        #;
        #    switch (this.list().typeId())
        #    {
        #        case Types::Int64:
        #        case Types::Integer:
        #        case Types::Real:
        #            return;
        #    }
        #
        #    throw Error(
        #        strfmt( "Функцию %1 можно вызывать только для числовых коллекций! Обратитесь к разработчикам."
        #              , _funcname
        #              )
        #    );
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #/// <summary>
        #/// Обертка для класса List , реализующая интерфейс ICollection
        #///
        #/// Варианты инициализации :
        #///    - на основе ранее созданного List
        #///         SysList::constructList( list)
        #///    - новый List с указанием типа
        #///         SysList::constructType( Types::Integer)
        #///
        #/// </summary>
        #/// <remarks>
        #///
        #/// </remarks>
        #class SysList implements ICollection
        #{
        #    List    list;
        #}
      ENDSOURCE
      SOURCE #Concat
        #SysList Concat(SysList _collection)
        #{
        #;
        #    return SysList::constructList( List::merge( this.list(), _collection.list()));
        #}
      ENDSOURCE
      SOURCE #Contains
        #boolean Contains(anytype item)
        #{
        #    Enumerator  enumerator = this.GetEnumerator();
        #    boolean     ret;
        #;
        #    while ( enumerator.moveNext())
        #    {
        #        if ( enumerator.current() == item)
        #        {
        #            ret = true;
        #            break;
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #Count
        #int Count()
        #{
        #    return list.elements();
        #}
      ENDSOURCE
      SOURCE #Except
        #SysList Except(SysList _collection)
        #{
        #    List        ret = new List( this.list().typeId());
        #    Enumerator  enumerator;
        #;
        #    enumerator  = this.GetEnumerator();
        #    while (enumerator.moveNext())
        #    {
        #        if ( !_collection.Contains( enumerator.current()))
        #            ret.addEnd( enumerator.current());
        #    }
        #
        #    return SysList::constructList( ret);
        #}
      ENDSOURCE
      SOURCE #GetEnumerator
        #ListEnumerator GetEnumerator()
        #{
        #    return list.getEnumerator();
        #}
      ENDSOURCE
      SOURCE #json
        #str json()
        #{
        #    return SysJSONConvert::construct().SerializeObject( this.list());
        #}
      ENDSOURCE
      SOURCE #list
        #List list()
        #{
        #    return list;
        #}
      ENDSOURCE
      SOURCE #MaxValue
        #anytype MaxValue()
        #{
        #    anytype     ret;
        #    Enumerator  enumerator;
        #    boolean     firstRecord = true;
        #;
        #    if ( !this.list().elements())
        #        throw Error("Коллекция не содержит элементов!");
        #
        #    enumerator  = this.GetEnumerator();
        #    while ( enumerator.moveNext())
        #    {
        #        if ( firstRecord)
        #        {
        #            firstRecord = false;
        #            ret = enumerator.current();
        #        }
        #        else
        #            ret = max(enumerator.current(),ret);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #MinValue
        #anytype MinValue()
        #{
        #    anytype     ret;
        #    Enumerator  enumerator;
        #    boolean     firstRecord = true;
        #;
        #    if ( !this.list().elements())
        #        throw Error("Коллекция не содержит элементов!");
        #
        #    enumerator  = this.GetEnumerator();
        #    while ( enumerator.moveNext())
        #    {
        #        if ( firstRecord)
        #        {
        #            firstRecord = false;
        #            ret = enumerator.current();
        #        }
        #        else
        #            ret = min(enumerator.current(),ret);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #new
        #void new( List _list)
        #{
        #;
        #    if ( !_list)
        #        throw Error(strfmt("В функцию %1 не передан параметр _list!", funcname()));
        #
        #    list = _list;
        #}
      ENDSOURCE
      SOURCE #Remove
        #SysList Remove( anytype item)
        #{
        #    ListIterator    iterator    = new ListIterator(this.list());
        #;
        #    iterator.begin();
        #    while (iterator.more())
        #    {
        #        if ( iterator.value() == item)
        #        {
        #            iterator.delete();
        #            break;
        #        }
        #
        #        iterator.next();
        #    }
        #
        #    return this;
        #}
      ENDSOURCE
      SOURCE #Sum
        #real Sum()
        #{
        #    real        ret;
        #    Enumerator  enumerator;
        #;
        #    this.assertCollectionIsNumber(funcname());
        #
        #    enumerator  = this.GetEnumerator();
        #    while (enumerator.moveNext())
        #    {
        #        ret += enumerator.current();
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #Union
        #SysList Union(SysList _collection)
        #{
        #    Enumerator  enumerator;
        #    Set         s   = new Set(this.list().typeId());
        #    List        ret = new List(this.list().typeId());
        #;
        #    enumerator  = this.list().getEnumerator();
        #    while (enumerator.moveNext())
        #    {
        #        s.add( enumerator.current());
        #    }
        #    enumerator  = _collection.list().getEnumerator();
        #    while (enumerator.moveNext())
        #    {
        #        s.add( enumerator.current());
        #    }
        #    enumerator  = s.getEnumerator();
        #    while (enumerator.moveNext())
        #    {
        #        ret.addEnd( enumerator.current());
        #    }
        #
        #    return SysList::constructList( ret);
        #}
      ENDSOURCE
      SOURCE #constructList
        #static SysList constructList(List _list)
        #{
        #    return new SysList(_list);
        #}
      ENDSOURCE
      SOURCE #constructType
        #static SysList constructType(Types _type = Types::AnyType)
        #{
        #    return SysList::constructList( new List(_type));
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysICollectionCLR выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysICollectionCLR
    PROPERTIES
      Name                #SysICollectionCLR
      Extends             #
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #assertCollectionIsNumber
        #protected void assertCollectionIsNumber(
        #    str     _funcname
        #)
        #{
        #;
        #    switch (this.itemTypeName())
        #    {
        #        case "System.Int64":
        #        case "System.Int32":
        #        case "System.Double":
        #            return;
        #    }
        #
        #    throw Error(
        #        strfmt( "Функцию %1 можно вызывать только для числовых коллекций! Обратитесь к разработчикам."
        #              , _funcname
        #              )
        #    );
        #}
      ENDSOURCE
      SOURCE #Add
        #SysICollectionCLR Add(anytype item)
        #{
        #;
        #    SysCLRReflection::invokeMethod(
        #        collection
        #      , "Add"
        #      , SysCLRReflection::getArray( this.getObjectForAnyType(item))
        #    );
        #
        #    return this;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #/// <summary>
        #/// Обертка для класса System.Collections.Generic.ICollection<T> , реализующая интерфейс ICollection
        #///
        #/// Варианты инициализации :
        #///    - на основе ранее созданного System.Collections.Generic.ICollection<T>
        #///         SysICollectionCLR::constructCollection( collection)
        #///
        #/// </summary>
        #/// <remarks>
        #///
        #/// </remarks>
        #class SysICollectionCLR implements ICollection
        #{
        #    System.Collections.IEnumerable  collection;
        #    // Тип коллекции
        #    System.Type                     collectionType;
        #    str                             collectionTypeName;
        #    // Тип элемента коллекции
        #    System.Type                     itemType;
        #    str                             itemTypeName;
        #}
      ENDSOURCE
      SOURCE #collection
        #System.Object collection()
        #{
        #    return collection;
        #}
      ENDSOURCE
      SOURCE #collectionType
        #System.Type collectionType()
        #{
        #;
        #    if (collectionType)
        #        return collectionType;
        #
        #    collectionType    = this.getCollectionType();
        #
        #    return collectionType;
        #}
      ENDSOURCE
      SOURCE #collectionTypeName
        #str collectionTypeName()
        #{
        #;
        #    if (collectionTypeName)
        #        return collectionTypeName;
        #
        #    collectionTypeName    = this.getCollectionTypeName();
        #
        #    return collectionTypeName;
        #}
      ENDSOURCE
      SOURCE #Concat
        #SysICollectionCLR Concat(SysICollectionCLR _collection)
        #{
        #    SysICollectionCLR   ret;
        #    System.Object       unionResult;
        #;
        #    unionResult    = SysCLRReflection::invokeStaticGenericType(
        #        SysICollectionCLR::SystemLinqEnumerableType()
        #      , "Concat"
        #      , this.itemType()
        #      , SysCLRReflection::getArray( this.collection(), _collection.collection())
        #      , true
        #    );
        #
        #    ret = SysICollectionCLR::constructCollection(
        #        SysCLRReflection::invokeStaticGenericType(
        #            SysICollectionCLR::SystemLinqEnumerableType()
        #          , "ToList"
        #          , this.itemType()
        #          , SysCLRReflection::getArray( unionResult)
        #        )
        #    );
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #Contains
        #boolean Contains(anytype item)
        #{
        #    Enumerator  enumerator = this.GetEnumerator();
        #    boolean     ret;
        #;
        #    while ( enumerator.moveNext())
        #    {
        #        if ( enumerator.current() == item)
        #        {
        #            ret = true;
        #            break;
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #Count
        #int Count()
        #{
        #    int ret;
        #;
        #    ret = SysCLRReflection::getPropertyValue(
        #        collection
        #      , "Count"
        #    );
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #Except
        #SysICollectionCLR Except(SysICollectionCLR _collection)
        #{
        #    SysICollectionCLR   ret;
        #    Enumerator          enumerator;
        #    System.Object       exceptResult;
        #;
        #    exceptResult    = SysCLRReflection::invokeStaticGenericType(
        #        SysICollectionCLR::SystemLinqEnumerableType()
        #      , "Except"
        #      , this.itemType()
        #      , SysCLRReflection::getArray( this.collection(), _collection.collection())
        #      , true
        #    );
        #
        #    ret = SysICollectionCLR::constructCollection(
        #        SysCLRReflection::invokeStaticGenericType(
        #            SysICollectionCLR::SystemLinqEnumerableType()
        #          , "ToList"
        #          , this.itemType()
        #          , SysCLRReflection::getArray( exceptResult)
        #        )
        #    );
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #getCollectionType
        #protected System.Type getCollectionType()
        #{
        #    System.Object                   object = this.collection();
        #    System.Type                     typeObject;
        #;
        #    typeObject      = object.GetType();
        #    return typeObject;
        #}
      ENDSOURCE
      SOURCE #getCollectionTypeName
        #protected str getCollectionTypeName()
        #{
        #    str                             ret;
        #;
        #    ret = this.collectionType().ToString();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #GetEnumerator
        #ISysEnumerator GetEnumerator()
        #{
        #    return SysEnumerator::newFromSystemCollection( collection);
        #}
      ENDSOURCE
      SOURCE #getItemType
        #protected System.Type getItemType()
        #{
        #    System.Object                   object = this.collection();
        #    System.Type                     typeObject;
        #    System.Reflection.PropertyInfo  propertyObject;
        #    System.Type                     itemTypeObject;
        #;
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    typeObject      = object.GetType();
        #    propertyObject  = typeObject.GetProperty("Item");
        #    itemTypeObject  = propertyObject.get_PropertyType();
        #    return itemTypeObject;
        #}
      ENDSOURCE
      SOURCE #getItemTypeName
        #protected str getItemTypeName()
        #{
        #    str                             ret;
        #;
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    ret = this.itemType().ToString();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #getObjectForAnyType
        #protected System.Object getObjectForAnyType(anytype item)
        #{
        #    System.Object       clrObject;
        #    SysICollectionCLR   collectionCLR;
        #    SysIDictionaryCLR   dictCLR;
        #    ClassId             classId;
        #;
        #    if ( typeof(item) == Types::Class)
        #    {
        #        classId = classidget(item);
        #        switch ( classId)
        #        {
        #            case classnum(CLRObject):
        #                clrObject   = item;
        #                break;
        #            default:
        #                if ( SysDictClass::isEqualOrSuperclass( classId, classnum(SysICollectionCLR)))
        #                {
        #                    collectionCLR   = item;
        #                    clrObject       = collectionCLR.collection();
        #                }
        #                else
        #                if ( SysDictClass::isEqualOrSuperclass( classId, classnum(SysIDictionaryCLR)))
        #                {
        #                    dictCLR     = item;
        #                    clrObject   = dictCLR.dictionary();
        #                }
        #                else
        #                {
        #                    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #                    clrObject       = CLRInterop::getObjectForAnyType( item);
        #                }
        #                break;
        #        }
        #    }
        #    else
        #    if ( typeof(item) == Types::Enum)
        #    {
        #        new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #        clrObject   = CLRInterop::getObjectForAnyType( enum2int(item));
        #    }
        #    else
        #    {
        #        new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #        clrObject   = CLRInterop::getObjectForAnyType( item);
        #    }
        #
        #    return clrObject;
        #}
      ENDSOURCE
      SOURCE #itemType
        #System.Type itemType()
        #{
        #;
        #    if (itemType)
        #        return itemType;
        #
        #    itemType    = this.getItemType();
        #
        #    return itemType;
        #}
      ENDSOURCE
      SOURCE #itemTypeName
        #str itemTypeName()
        #{
        #;
        #    if (itemTypeName)
        #        return itemTypeName;
        #
        #    itemTypeName    = this.getItemTypeName();
        #
        #    return itemTypeName;
        #}
      ENDSOURCE
      SOURCE #json
        #str json()
        #{
        #    return SysJSONConvert::construct().SerializeCLRObject( this.collection());
        #}
      ENDSOURCE
      SOURCE #MaxValue
        #anytype MaxValue()
        #{
        #    anytype         ret;
        #    System.Object   retCLR;
        #;
        #    if ( !this.Count())
        #        throw Error("Коллекция не содержит элементов!");
        #
        #    retCLR = SysCLRReflection::invokeStaticGenericType(
        #        SysICollectionCLR::SystemLinqEnumerableType()
        #      , "Max"
        #      , this.itemType()
        #      , SysCLRReflection::getArray( this.collection())
        #      , true
        #    );
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    ret = CLRInterop::getAnyTypeForObject(retCLR);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #MinValue
        #anytype MinValue()
        #{
        #    anytype         ret;
        #    System.Object   retCLR;
        #;
        #    if ( !this.Count())
        #        throw Error("Коллекция не содержит элементов!");
        #
        #    retCLR = SysCLRReflection::invokeStaticGenericType(
        #        SysICollectionCLR::SystemLinqEnumerableType()
        #      , "Min"
        #      , this.itemType()
        #      , SysCLRReflection::getArray( this.collection())
        #      , true
        #    );
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    ret = CLRInterop::getAnyTypeForObject(retCLR);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #new
        #void new( System.Object _collection)
        #{
        #;
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    if ( CLRInterop::isNull(_collection))
        #        throw Error(strfmt("В функцию %1 не передан параметр _collection!", funcname()));
        #
        #    collection = _collection;
        #}
      ENDSOURCE
      SOURCE #params
        #protected Array params(
        #    System.Object _parameter1 = null
        #  , System.Object _parameter2 = null
        #  , System.Object _parameter3 = null
        #)
        #{
        #    Array   params;
        #;
        #    params  = new Array(Types::Class);
        #    if ( !prmisdefault(_parameter1))
        #    {
        #        params.value( 1, _parameter1);
        #    }
        #    if ( !prmisdefault(_parameter2))
        #    {
        #        params.value( 2, _parameter2);
        #    }
        #    if ( !prmisdefault(_parameter3))
        #    {
        #        params.value( 3, _parameter3);
        #    }
        #
        #    return params;
        #}
      ENDSOURCE
      SOURCE #Remove
        #SysICollectionCLR Remove(anytype item)
        #{
        #;
        #    SysCLRReflection::invokeMethod(
        #        collection
        #      , "Remove"
        #      , SysCLRReflection::getArray( this.getObjectForAnyType(item))
        #    );
        #
        #    return this;
        #}
      ENDSOURCE
      SOURCE #Sum
        #real Sum()
        #{
        #    real            ret;
        #    System.Object   retCLR;
        #;
        #    this.assertCollectionIsNumber( funcname());
        #
        #    retCLR = SysCLRReflection::invokeStaticGenericType(
        #        SysICollectionCLR::SystemLinqEnumerableType()
        #      , "Sum"
        #      , this.itemType()
        #      , SysCLRReflection::getArray( this.collection())
        #      , true
        #    );
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    ret = CLRInterop::getAnyTypeForObject(retCLR);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #Union
        #SysICollectionCLR Union(SysICollectionCLR _collection)
        #{
        #    SysICollectionCLR   ret;
        #    System.Object       unionResult;
        #;
        #    unionResult    = SysCLRReflection::invokeStaticGenericType(
        #        SysICollectionCLR::SystemLinqEnumerableType()
        #      , "Union"
        #      , this.itemType()
        #      , SysCLRReflection::getArray( this.collection(), _collection.collection())
        #      , true
        #    );
        #
        #    ret = SysICollectionCLR::constructCollection(
        #        SysCLRReflection::invokeStaticGenericType(
        #            SysICollectionCLR::SystemLinqEnumerableType()
        #          , "ToList"
        #          , this.itemType()
        #          , SysCLRReflection::getArray( unionResult)
        #        )
        #    );
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #constructCollection
        #static SysICollectionCLR constructCollection( System.Object _collection)
        #{
        #    return new SysICollectionCLR(_collection);
        #}
      ENDSOURCE
      SOURCE #constructCollectionTypeName
        #protected static SysICollectionCLR constructCollectionTypeName(
        #    str _collectionTypeName
        #)
        #{
        #    System.Type         collectionType;
        #    System.Object       collection;
        #;
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    collectionType    = SysCLRType::newFromTypeName( _collectionTypeName).parmClrType();
        #    collection        = System.Activator::CreateInstance( collectionType);
        #
        #    return SysICollectionCLR::constructCollection( collection);
        #}
      ENDSOURCE
      SOURCE #getTypeCLRForTypes
        #protected static System.Type getTypeCLRForTypes( Types _type)
        #{
        #    System.Type     ret;
        #;
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    return System.Type::GetType( SysICollectionCLR::getTypeNameForTypes(_type));
        #}
      ENDSOURCE
      SOURCE #getTypeNameForTypes
        #protected static str getTypeNameForTypes( Types _type)
        #{
        #    str ret;
        #;
        #    switch (_type)
        #    {
        #        case Types::AnyType:
        #        case Types::Class:
        #        case Types::Record:
        #            ret = "System.Object";
        #            break;
        #        case Types::Time:
        #        case Types::Integer:
        #        case Types::Enum:
        #            ret = "System.Int32";
        #            break;
        #        case Types::Int64:
        #            ret = "System.Int64";
        #            break;
        #        case Types::Real:
        #            ret = "System.Double";
        #            break;
        #        case Types::Guid:
        #            ret = "System.Guid";
        #            break;
        #        case Types::String:
        #        case Types::RString:
        #        case Types::VarString:
        #            ret = "System.String";
        #            break;
        #        case Types::UtcDateTime:
        #        case Types::Date:
        #            ret = "System.DateTime";
        #            break;
        #        default:
        #            throw Error(Error::unsupportedEnumValue( funcname(), _type));
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #SystemLinqEnumerableType
        #static System.Type SystemLinqEnumerableType()
        #{
        #    return SysCLRType::newFromTypeName("System.Linq.Enumerable, System.Linq, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a").parmClrType();
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysListCLR выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysListCLR
    PROPERTIES
      Name                #SysListCLR
      Extends             #SysICollectionCLR
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #/// <summary>
        #/// Обертка для класса System.Collections.Generic.List<T> , реализующая интерфейс ICollection
        #///
        #/// Варианты инициализации :
        #///    - на основе ранее созданного System.Collections.Generic.List
        #///         SysListCLR::constructList( list)
        #///    - новый List с указанием названия типа
        #///         SysListCLR::constructTypeName( "System.String")
        #///    - новый List с указанием типа
        #///         SysListCLR::constructType( Types::String))
        #///    - новый List с указанием типа CLR
        #///         SysListCLR::constructTypeCLR( System.Type::GetType("System.String"))
        #///
        #/// </summary>
        #/// <remarks>
        #///
        #/// </remarks>
        #class SysListCLR extends SysICollectionCLR
        #{
        #}
      ENDSOURCE
      SOURCE #constructList
        #static SysListCLR constructList( System.Object _list)
        #{
        #    return new SysListCLR(_list);
        #}
      ENDSOURCE
      SOURCE #constructType
        #static SysListCLR constructType(
        #    Types _type = Types::AnyType
        #)
        #{
        #    return SysListCLR::constructTypeName( SysICollectionCLR::getTypeNameForTypes(_type));
        #}
      ENDSOURCE
      SOURCE #constructTypeCLR
        #static SysListCLR constructTypeCLR(System.Type _type)
        #{
        #;
        #    if ( CLRInterop::isNull(_type))
        #        throw Error(strfmt("В функцию %1 не передан параметр _type!", funcname()));
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    return SysListCLR::constructTypeName( _type.ToString());
        #}
      ENDSOURCE
      SOURCE #constructTypeName
        #static SysListCLR constructTypeName(
        #    str _itemTypeName = SysICollectionCLR::getTypeNameForTypes(Types::AnyType)
        #)
        #{
        #    return SysICollectionCLR::constructCollectionTypeName( strfmt( "System.Collections.Generic.List`1[%1]", _itemTypeName));
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysSetTest выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysSetTest
    PROPERTIES
      Name                #SysSetTest
      Extends             #SysTestCase
      RunOn               #Server
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #testSum
        #void testSum()
        #{
        #;
        #    this.constructType( Types::Integer);
        #    sysSet.Add(10);
        #    sysSet.Add(20);
        #    this.assertEquals( 30, any2int(sysSet.Sum()));
        #
        #    this.constructType( Types::Integer);
        #    sysSet.Add(-10);
        #    sysSet.Add(-20);
        #    this.assertEquals( -30, any2int(sysSet.Sum()));
        #
        #    this.constructType( Types::Integer);
        #    this.assertEquals( 0, any2int(sysSet.Sum()));
        #
        #    this.constructType( Types::String);
        #    this.parmExceptionExpected( true, "Функцию SysSet.Sum можно вызывать только для числовых коллекций! Обратитесь к разработчикам.");
        #    sysSet.Sum();
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #class SysSetTest extends SysTestCase
        #{
        #    SysSet     sysSet;
        #}
      ENDSOURCE
      SOURCE #constructSet
        #protected void constructSet( Set _set)
        #{
        #;
        #    sysSet  = SysSet::constructSet( _set);
        #}
      ENDSOURCE
      SOURCE #constructType
        #protected void constructType( Types _type)
        #{
        #;
        #    sysSet  = SysSet::constructType( _type);
        #}
      ENDSOURCE
      SOURCE #testAdd
        #void testAdd()
        #{
        #;
        #    this.constructType( Types::Integer);
        #    sysSet.Add(10);
        #    this.assertEquals( 1, sysSet.Count());
        #    sysSet.Add(20);
        #    this.assertEquals( 2, sysSet.Count());
        #}
      ENDSOURCE
      SOURCE #testConcat
        #void testConcat()
        #{
        #;
        #    sysSet  = SysSet::constructType(Types::String)
        #        .Add("01")
        #        .Add("02")
        #        .Add("03")
        #        .Add("04")
        #        .Add("05")
        #        .Concat( SysSet::constructType(Types::String)
        #            .Add("02")
        #            .Add("03")
        #            .Add("06")
        #        )
        #    ;
        #    this.assertNotNull(sysSet);
        #    this.assertEquals( 6, sysSet.Count());
        #}
      ENDSOURCE
      SOURCE #testConstructSet
        #void testConstructSet()
        #{
        #;
        #    this.constructSet( new Set(Types::String));
        #    this.assertNotNull(sysSet);
        #}
      ENDSOURCE
      SOURCE #testConstructType
        #void testConstructType()
        #{
        #;
        #    this.constructType( Types::String);
        #    this.assertNotNull(sysSet);
        #}
      ENDSOURCE
      SOURCE #testContains
        #void testContains()
        #{
        #;
        #    this.constructType( Types::Integer);
        #    sysSet.Add(10);
        #    sysSet.Add(20);
        #
        #    this.assertTrue( sysSet.Contains(20));
        #    this.assertFalse( sysSet.Contains(30));
        #}
      ENDSOURCE
      SOURCE #testCount
        #void testCount()
        #{
        #;
        #    this.constructType( Types::Integer);
        #    this.assertEquals( 0, sysSet.Count());
        #
        #    sysSet.set().add(10);
        #    this.assertEquals( 1, sysSet.Count());
        #}
      ENDSOURCE
      SOURCE #testExcept
        #void testExcept()
        #{
        #;
        #    sysSet  = SysSet::constructType(Types::String)
        #        .Add("01")
        #        .Add("02")
        #        .Add("03")
        #        .Add("04")
        #        .Add("05")
        #        .Except( SysSet::constructType(Types::String)
        #            .Add("02")
        #            .Add("03")
        #        )
        #    ;
        #    this.assertNotNull(sysSet);
        #    this.assertEquals( 3, sysSet.Count());
        #}
      ENDSOURCE
      SOURCE #testGetEnumerator
        #void testGetEnumerator()
        #{
        #    Enumerator  enumerator;
        #    int         i;
        #;
        #    this.constructType(Types::Integer);
        #    sysSet.Add(10);
        #    sysSet.Add(20);
        #
        #    enumerator  = sysSet.GetEnumerator();
        #    this.assertNotNull( enumerator);
        #
        #    while (enumerator.moveNext())
        #    {
        #        i++;
        #    }
        #    this.assertEquals( 2, i);
        #}
      ENDSOURCE
      SOURCE #testMaxValue
        #void testMaxValue()
        #{
        #;
        #    this.constructType( Types::Integer);
        #    sysSet.Add(10);
        #    sysSet.Add(20);
        #    this.assertEquals( 20, any2int(sysSet.MaxValue()));
        #
        #    this.constructType( Types::Integer);
        #    sysSet.Add(-10);
        #    sysSet.Add(-20);
        #    this.assertEquals( -10, any2int(sysSet.MaxValue()));
        #
        #    this.constructType( Types::String);
        #    sysSet.Add("abc");
        #    sysSet.Add("ab");
        #    this.assertEquals( "abc", any2str(sysSet.MaxValue()));
        #
        #    this.constructType( Types::Date);
        #    sysSet.Add( 01\01\2010);
        #    sysSet.Add( 01\01\2011);
        #    this.assertEquals( 01\01\2011, any2date(sysSet.MaxValue()));
        #
        #    this.constructType( Types::Integer);
        #    this.parmExceptionExpected( true, "Коллекция не содержит элементов!");
        #    sysSet.MaxValue();
        #}
      ENDSOURCE
      SOURCE #testMinValue
        #void testMinValue()
        #{
        #;
        #    this.constructType( Types::Integer);
        #    sysSet.Add(10);
        #    sysSet.Add(20);
        #    this.assertEquals( 10, any2int(sysSet.MinValue()));
        #
        #    this.constructType( Types::Integer);
        #    sysSet.Add(-10);
        #    sysSet.Add(-20);
        #    this.assertEquals( -20, any2int(sysSet.MinValue()));
        #
        #    this.constructType( Types::String);
        #    sysSet.Add("abc");
        #    sysSet.Add("ab");
        #    this.assertEquals( "ab", any2str(sysSet.MinValue()));
        #
        #    this.constructType( Types::Date);
        #    sysSet.Add( 01\01\2010);
        #    sysSet.Add( 01\01\2011);
        #    this.assertEquals( 01\01\2010, any2date(sysSet.MinValue()));
        #
        #    this.constructType( Types::Integer);
        #    this.parmExceptionExpected( true, "Коллекция не содержит элементов!");
        #    sysSet.MinValue();
        #}
      ENDSOURCE
      SOURCE #testRemove
        #void testRemove()
        #{
        #;
        #    sysSet = SysSet::constructType(Types::Integer);
        #    sysSet.Add(10);
        #    this.assertEquals( 1, sysSet.Count());
        #    sysSet.Add(20);
        #    this.assertEquals( 2, sysSet.Count());
        #    sysSet.Remove(30);
        #    this.assertEquals( 2, sysSet.Count());
        #    sysSet.Remove(20);
        #    this.assertEquals( 1, sysSet.Count());
        #}
      ENDSOURCE
      SOURCE #testUnion
        #void testUnion()
        #{
        #;
        #    sysSet  = SysSet::constructType(Types::String)
        #        .Add("01")
        #        .Add("02")
        #        .Add("03")
        #        .Add("04")
        #        .Add("05")
        #        .Union( SysSet::constructType(Types::String)
        #            .Add("02")
        #            .Add("03")
        #            .Add("06")
        #        )
        #    ;
        #    this.assertNotNull(sysSet);
        #    this.assertEquals( 6, sysSet.Count());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysListTest выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysListTest
    PROPERTIES
      Name                #SysListTest
      Extends             #SysTestCase
      RunOn               #Server
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #class SysListTest extends SysTestCase
        #{
        #    SysList     sysList;
        #}
      ENDSOURCE
      SOURCE #constructList
        #protected void constructList( List _list)
        #{
        #;
        #    sysList  = SysList::constructList( _list);
        #}
      ENDSOURCE
      SOURCE #constructType
        #protected void constructType( Types _type)
        #{
        #;
        #    sysList  = SysList::constructType( _type);
        #}
      ENDSOURCE
      SOURCE #testAdd
        #void testAdd()
        #{
        #;
        #    this.constructType(Types::Integer);
        #    sysList.Add(10);
        #    this.assertEquals( 1, sysList.Count());
        #    sysList.Add(20);
        #    this.assertEquals( 2, sysList.Count());
        #}
      ENDSOURCE
      SOURCE #testConcat
        #void testConcat()
        #{
        #;
        #    sysList  = SysList::constructType(Types::String)
        #        .Add("01")
        #        .Add("02")
        #        .Add("03")
        #        .Add("04")
        #        .Add("04")
        #        .Add("05")
        #        .Concat( SysList::constructType(Types::String)
        #            .Add("02")
        #            .Add("03")
        #            .Add("06")
        #        )
        #    ;
        #    this.assertNotNull(sysList);
        #    this.assertEquals( 9, sysList.Count());
        #}
      ENDSOURCE
      SOURCE #testConstructList
        #void testConstructList()
        #{
        #;
        #    this.constructList( new List(Types::String));
        #    this.assertNotNull(sysList);
        #}
      ENDSOURCE
      SOURCE #testConstructType
        #void testConstructType()
        #{
        #;
        #    this.constructType( Types::String);
        #    this.assertNotNull(sysList);
        #}
      ENDSOURCE
      SOURCE #testContains
        #void testContains()
        #{
        #;
        #    this.constructType(Types::Integer);
        #    sysList.Add(10);
        #    sysList.Add(20);
        #
        #    this.assertTrue( sysList.Contains(20));
        #    this.assertFalse( sysList.Contains(30));
        #}
      ENDSOURCE
      SOURCE #testCount
        #void testCount()
        #{
        #    List    list = new List(Types::Integer);
        #;
        #    this.constructList( list);
        #    this.assertEquals( 0, sysList.Count());
        #
        #    list.addEnd(10);
        #    this.assertEquals( 1, sysList.Count());
        #}
      ENDSOURCE
      SOURCE #testExcept
        #void testExcept()
        #{
        #;
        #    sysList  = SysList::constructType(Types::String)
        #        .Add("01")
        #        .Add("02")
        #        .Add("03")
        #        .Add("04")
        #        .Add("05")
        #        .Except( SysList::constructType(Types::String)
        #            .Add("02")
        #            .Add("03")
        #        )
        #    ;
        #    this.assertNotNull(sysList);
        #    this.assertEquals( 3, sysList.Count());
        #}
      ENDSOURCE
      SOURCE #testGetEnumerator
        #void testGetEnumerator()
        #{
        #    Enumerator  enumerator;
        #    int         i;
        #;
        #    this.constructType(Types::Integer);
        #    sysList.Add(10);
        #    sysList.Add(20);
        #
        #    enumerator  = sysList.GetEnumerator();
        #    this.assertNotNull( enumerator);
        #
        #    while (enumerator.moveNext())
        #    {
        #        i++;
        #    }
        #    this.assertEquals( 2, i);
        #}
      ENDSOURCE
      SOURCE #testMaxValue
        #void testMaxValue()
        #{
        #;
        #    this.constructType( Types::Integer);
        #    sysList.Add(10);
        #    sysList.Add(20);
        #    this.assertEquals( 20, any2int(sysList.MaxValue()));
        #
        #    this.constructType( Types::Integer);
        #    sysList.Add(-10);
        #    sysList.Add(-20);
        #    this.assertEquals( -10, any2int(sysList.MaxValue()));
        #
        #    this.constructType( Types::String);
        #    sysList.Add("abc");
        #    sysList.Add("ab");
        #    this.assertEquals( "abc", any2str(sysList.MaxValue()));
        #
        #    this.constructType( Types::Date);
        #    sysList.Add( 01\01\2010);
        #    sysList.Add( 01\01\2011);
        #    this.assertEquals( 01\01\2011, any2date(sysList.MaxValue()));
        #
        #    this.constructType( Types::Integer);
        #    this.parmExceptionExpected( true, "Коллекция не содержит элементов!");
        #    sysList.MaxValue();
        #}
      ENDSOURCE
      SOURCE #testMinValue
        #void testMinValue()
        #{
        #;
        #    this.constructType( Types::Integer);
        #    sysList.Add(10);
        #    sysList.Add(20);
        #    this.assertEquals( 10, any2int(sysList.MinValue()));
        #
        #    this.constructType( Types::Integer);
        #    sysList.Add(-10);
        #    sysList.Add(-20);
        #    this.assertEquals( -20, any2int(sysList.MinValue()));
        #
        #    this.constructType( Types::String);
        #    sysList.Add("abc");
        #    sysList.Add("ab");
        #    this.assertEquals( "ab", any2str(sysList.MinValue()));
        #
        #    this.constructType( Types::Date);
        #    sysList.Add( 01\01\2010);
        #    sysList.Add( 01\01\2011);
        #    this.assertEquals( 01\01\2010, any2date(sysList.MinValue()));
        #
        #    this.constructType( Types::Integer);
        #    this.parmExceptionExpected( true, "Коллекция не содержит элементов!");
        #    sysList.MinValue();
        #}
      ENDSOURCE
      SOURCE #testRemove
        #void testRemove()
        #{
        #;
        #    this.constructType( Types::Integer);
        #    sysList.Add(10);
        #    this.assertEquals( 1, sysList.Count());
        #    sysList.Add(20);
        #    this.assertEquals( 2, sysList.Count());
        #    sysList.Remove(30);
        #    this.assertEquals( 2, sysList.Count());
        #    sysList.Remove(20);
        #    this.assertEquals( 1, sysList.Count());
        #}
      ENDSOURCE
      SOURCE #testSum
        #void testSum()
        #{
        #;
        #    this.constructType( Types::Integer);
        #    sysList.Add(10);
        #    sysList.Add(20);
        #    this.assertEquals( 30, any2int(sysList.Sum()));
        #
        #    this.constructType( Types::Integer);
        #    sysList.Add(-10);
        #    sysList.Add(-20);
        #    this.assertEquals( -30, any2int(sysList.Sum()));
        #
        #    this.constructType( Types::Integer);
        #    this.assertEquals( 0, any2int(sysList.Sum()));
        #
        #    this.constructType( Types::String);
        #    this.parmExceptionExpected( true, "Функцию SysList.Sum можно вызывать только для числовых коллекций! Обратитесь к разработчикам.");
        #    sysList.Sum();
        #}
      ENDSOURCE
      SOURCE #testUnion
        #void testUnion()
        #{
        #;
        #    sysList  = SysList::constructType(Types::String)
        #        .Add("01")
        #        .Add("02")
        #        .Add("03")
        #        .Add("04")
        #        .Add("04")
        #        .Add("05")
        #        .Union( SysList::constructType(Types::String)
        #            .Add("02")
        #            .Add("03")
        #            .Add("06")
        #        )
        #    ;
        #    this.assertNotNull(sysList);
        #    this.assertEquals( 6, sysList.Count());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysListCLRTest выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysListCLRTest
    PROPERTIES
      Name                #SysListCLRTest
      Extends             #SysTestCase
      RunOn               #Server
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #class SysListCLRTest extends SysTestCase
        #{
        #    SysListCLR     sysList;
        #}
      ENDSOURCE
      SOURCE #constructType
        #protected void constructType( Types _type)
        #{
        #;
        #    sysList  = SysListCLR::constructType( _type);
        #}
      ENDSOURCE
      SOURCE #constructTypeName
        #protected void constructTypeName( str _typeName)
        #{
        #;
        #    sysList  = SysListCLR::constructTypeName( _typeName);
        #}
      ENDSOURCE
      SOURCE #getValueOfAnytype
        #protected anytype getValueOfAnytype(
        #    Types   _type
        #  , int     _iteration = 1
        #)
        #{
        #    anytype     ret;
        #    timeOfDay   time;
        #;
        #    switch (_type)
        #    {
        #        case Types::AnyType:
        #        case Types::Class:
        #        case Types::Record:
        #            ret = SysListCLR::constructType().Add( 30 + _iteration).Add( 40 + _iteration);
        #            break;
        #        case Types::Integer:
        #            ret = 10 + _iteration;
        #            break;
        #        case Types::Enum:
        #            ret = any2int(Types::Container);
        #            break;
        #        case Types::Int64:
        #            ret = 123456667 + _iteration;
        #            break;
        #        case Types::Real:
        #            ret = 345.98 + _iteration;
        #            break;
        #        case Types::Guid:
        #            ret = newguid();
        #            break;
        #        case Types::Time:
        #            ret = time + _iteration;
        #            break;
        #        case Types::String:
        #        case Types::RString:
        #        case Types::VarString:
        #            ret = "String" + int2str(_iteration);
        #            break;
        #        case Types::UtcDateTime:
        #            ret = DateTimeUtil::addHours( DateTimeUtil::utcNow(), _iteration);
        #            break;
        #        case Types::Date:
        #            ret = systemdateget() + _iteration;
        #            break;
        #        default:
        #            throw Error(Error::unsupportedEnumValue( funcname(), _type));
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #testAdd
        #void testAdd()
        #{
        #    ISysEnumerator   se;
        #    Types           type;
        #;
        #    setprefix("Add");
        #
        #    se = SysEnumerator_Enum::construct( new SysDictEnum(enumnum(Types)));
        #    while ( se.moveNext())
        #    {
        #        if ( se.current() == Types::Container
        #          || se.current() == Types::UserType
        #          || se.current() == Types::BLOB
        #          || se.current() == Types::void
        #           )
        #            continue;
        #
        #        type    = se.current();
        #
        #        setprefix(enum2str(type));
        #
        #        this.constructType(type);
        #        sysList.Add( this.getValueOfAnytype( type, 1));
        #        this.assertEquals( 1, sysList.Count());
        #        sysList.Add( this.getValueOfAnytype( type, 2));
        #        this.assertEquals( 2, sysList.Count());
        #    }
        #}
      ENDSOURCE
      SOURCE #testConcat
        #void testConcat()
        #{
        #;
        #    sysList  = SysListCLR::constructTypeName("System.String")
        #        .Add("01")
        #        .Add("02")
        #        .Add("02")
        #        .Add("03")
        #        .Add("04")
        #        .Add("03")
        #        .Add("05")
        #        .Concat( SysListCLR::constructTypeName("System.String")
        #            .Add("02")
        #            .Add("03")
        #            .Add("06")
        #        )
        #    ;
        #    this.assertNotNull(sysList);
        #    this.assertEquals( 10, sysList.Count());
        #}
      ENDSOURCE
      SOURCE #testConstructTypeName
        #void testConstructTypeName()
        #{
        #;
        #    this.constructTypeName( "System.String");
        #    this.assertNotNull(sysList);
        #}
      ENDSOURCE
      SOURCE #testConstructTypes
        #void testConstructTypes()
        #{
        #    ISysEnumerator   se;
        #;
        #    se = SysEnumerator_Enum::construct( new SysDictEnum(enumnum(Types)));
        #    while ( se.moveNext())
        #    {
        #        if ( se.current() == Types::Container
        #          || se.current() == Types::UserType
        #          || se.current() == Types::BLOB
        #          || se.current() == Types::void
        #           )
        #            continue;
        #
        #        setprefix(enum2str(se.current()));
        #
        #        this.constructType( se.current());
        #        this.assertNotNull(sysList);
        #    }
        #}
      ENDSOURCE
      SOURCE #testContains
        #void testContains()
        #{
        #;
        #    this.constructTypeName("System.Int32");
        #    sysList.Add(10);
        #    sysList.Add(20);
        #
        #    this.assertTrue( sysList.Contains(20));
        #    this.assertFalse( sysList.Contains(30));
        #}
      ENDSOURCE
      SOURCE #testCount
        #void testCount()
        #{
        #;
        #    this.constructTypeName("System.Int32");
        #    this.assertEquals( 0, sysList.Count());
        #
        #    sysList.Add(10);
        #    this.assertEquals( 1, sysList.Count());
        #}
      ENDSOURCE
      SOURCE #testExcept
        #void testExcept()
        #{
        #;
        #    sysList  = SysListCLR::constructTypeName("System.String")
        #        .Add("01")
        #        .Add("02")
        #        .Add("02")
        #        .Add("03")
        #        .Add("04")
        #        .Add("05")
        #        .Except( SysListCLR::constructTypeName("System.String")
        #            .Add("02")
        #            .Add("03")
        #        )
        #    ;
        #    this.assertNotNull(sysList);
        #    this.assertEquals( 3, sysList.Count());
        #}
      ENDSOURCE
      SOURCE #testGetEnumerator
        #void testGetEnumerator()
        #{
        #    Enumerator  enumerator;
        #    int         i;
        #;
        #    this.constructTypeName("System.Int32");
        #    sysList.Add(10);
        #    sysList.Add(20);
        #
        #    enumerator  = sysList.GetEnumerator();
        #    this.assertNotNull( enumerator);
        #
        #    while (enumerator.moveNext())
        #    {
        #        i++;
        #    }
        #    this.assertEquals( 2, i);
        #}
      ENDSOURCE
      SOURCE #testItemTypeName
        #void testItemTypeName()
        #{
        #    str     itemTypeName = "System.Int32";
        #;
        #    this.constructTypeName( itemTypeName);
        #    this.assertEquals( itemTypeName, sysList.itemTypeName());
        #}
      ENDSOURCE
      SOURCE #testMaxValue
        #void testMaxValue()
        #{
        #;
        #    this.constructType( Types::Integer);
        #    sysList.Add(10);
        #    sysList.Add(20);
        #    this.assertEquals( 20, any2int(sysList.MaxValue()));
        #
        #    this.constructType( Types::Integer);
        #    sysList.Add(-10);
        #    sysList.Add(-20);
        #    this.assertEquals( -10, any2int(sysList.MaxValue()));
        #
        #    this.constructType( Types::String);
        #    sysList.Add("abc");
        #    sysList.Add("ab");
        #    this.assertEquals( "abc", any2str(sysList.MaxValue()));
        #
        #    this.constructType( Types::Date);
        #    sysList.Add(01\01\2010);
        #    sysList.Add(01\01\2011);
        #    this.assertEquals( 01\01\2011, any2date(sysList.MaxValue()));
        #
        #    this.constructType( Types::Integer);
        #    this.parmExceptionExpected( true, "Коллекция не содержит элементов!");
        #    sysList.MaxValue();
        #}
      ENDSOURCE
      SOURCE #testMinValue
        #void testMinValue()
        #{
        #;
        #    this.constructType( Types::Integer);
        #    sysList.Add(10);
        #    sysList.Add(20);
        #    this.assertEquals( 10, any2int(sysList.MinValue()));
        #
        #    this.constructType( Types::Integer);
        #    sysList.Add(-10);
        #    sysList.Add(-20);
        #    this.assertEquals( -20, any2int(sysList.MinValue()));
        #
        #    this.constructType( Types::String);
        #    sysList.Add("abc");
        #    sysList.Add("ab");
        #    this.assertEquals( "ab", any2str(sysList.MinValue()));
        #
        #    this.constructType( Types::Date);
        #    sysList.Add(01\01\2010);
        #    sysList.Add(01\01\2011);
        #    this.assertEquals( 01\01\2010, any2date(sysList.MinValue()));
        #
        #    this.constructType( Types::Integer);
        #    this.parmExceptionExpected( true, "Коллекция не содержит элементов!");
        #    sysList.MinValue();
        #}
      ENDSOURCE
      SOURCE #testRemove
        #void testRemove()
        #{
        #;
        #    this.constructTypeName("System.Int32");
        #    sysList.Add(10);
        #    this.assertEquals( 1, sysList.Count());
        #    sysList.Add(20);
        #    sysList.Add(20);
        #    this.assertEquals( 3, sysList.Count());
        #    sysList.Remove(30);
        #    this.assertEquals( 3, sysList.Count());
        #    sysList.Remove(20);
        #    this.assertEquals( 2, sysList.Count());
        #}
      ENDSOURCE
      SOURCE #testSum
        #void testSum()
        #{
        #;
        #    this.constructType( Types::Integer);
        #    sysList.Add(10);
        #    sysList.Add(20);
        #    this.assertEquals( 30, any2int(sysList.Sum()));
        #
        #    this.constructType( Types::Integer);
        #    sysList.Add(-10);
        #    sysList.Add(-20);
        #    this.assertEquals( -30, any2int(sysList.Sum()));
        #
        #    this.constructType( Types::Integer);
        #    this.assertEquals( 0, any2int(sysList.Sum()));
        #
        #    this.constructType( Types::String);
        #    this.parmExceptionExpected( true, "Функцию SysICollectionCLR.Sum можно вызывать только для числовых коллекций! Обратитесь к разработчикам.");
        #    sysList.Sum();
        #}
      ENDSOURCE
      SOURCE #testUnion
        #void testUnion()
        #{
        #;
        #    sysList  = SysListCLR::constructTypeName("System.String")
        #        .Add("01")
        #        .Add("02")
        #        .Add("02")
        #        .Add("03")
        #        .Add("04")
        #        .Add("03")
        #        .Add("05")
        #        .Union( SysListCLR::constructTypeName("System.String")
        #            .Add("02")
        #            .Add("03")
        #            .Add("06")
        #        )
        #    ;
        #    this.assertNotNull(sysList);
        #    this.assertEquals( 6, sysList.Count());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: PRN

; Microsoft Dynamics AX Project : ICollection unloaded
; --------------------------------------------------------------------------------
  PROJECTVERSION 2
  
  PROJECT #ICollection
   SHARED
  PROPERTIES
    Name                #ICollection
  ENDPROPERTIES
  
    PROJECTCLASS ProjectNode
    GROUP #Classes
      PROPERTIES
        Name                #Classes
        ProjectGroupType    #Classes
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 41876
        NODETYPE 329
        NAME #ICollection
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 41900
        NODETYPE 329
        NAME #ICollectionStatic
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 41878
        NODETYPE 329
        NAME #SysSet
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 41879
        NODETYPE 329
        NAME #SysList
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 41881
        NODETYPE 329
        NAME #SysICollectionCLR
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 41880
        NODETYPE 329
        NAME #SysListCLR
      ENDNODE
      ENDGROUP
      
    GROUP #Test
      PROPERTIES
        Name                #Test
        ProjectGroupType    #Classes
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 41889
        NODETYPE 329
        NAME #SysSetTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 41888
        NODETYPE 329
        NAME #SysListTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 41890
        NODETYPE 329
        NAME #SysListCLRTest
      ENDNODE
      ENDGROUP
      
  ENDPROJECT
  

***Element: END
